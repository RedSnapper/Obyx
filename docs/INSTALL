Obyx is protected as a trade mark (2483369) in the name of Red Snapper Ltd.
This file is Copyright (C) 2006-2010 Red Snapper Ltd. http://www.redsnapper.net
The governing usage license can be found at http://www.gnu.org/licenses/gpl-3.0.txt

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
------------------------------------------------------------------------------------
Obyx INSTALL file. 
HTML versions of this file can be found at http://www.obyx.org/en/1/installationdebian.html

Please send bug reports to <bugs@obyx.org>
Obyx can be compiled from code using a small number of supporting libraries. 

This file explains how the code can be compiled under Debian Linux to get a working version of Obyx.
It is assumed that Apache and MySQL are already available, configured and running.

Installation Process

This installation guide consists of the following steps:

	* 1. Preparation of host: Application support installation
	* 2. Preparation of host: Library installations
	* 3. Set up Server File Structure
	* 4. Download source code (SVN)
	* 5. Set up compile settings
	* 6. Compile obyx.cgi binary
	* 7. Configure HTTP server
	* 8. Test

**** 1. Preparation of host: Application support installation

It is assumed MySQL/PostgreSQL and Apache are already installed and working.
The Obyx source code is C++ and requires gcc/g++ compiler to compile.
The source code is stored in a SVN repository, so svn is necessary to get it.
Installation here is provided using the aptitude tool as an example. 

	g++ Compiler (>= 4.1)
    deb: g++ 
	$sudo aptitude install g++

	svn
    deb: subversion 
	$sudo aptitude install subversion
	
MAC OS X
	Install xcode and mysql (or postgre)



**** 2. Preparation of host: Compile-time Library installations 

Obyx relies on a number of supporting libraries at compilation time.
Installation here is provided using the aptitude tool as an example. 
In most cases the development version of libraries is required.
With the runtime libraries, there is still need for headers.

** Compile-time
(see below for mac os x)

xercesc 3.01
http://xerces.apache.org/xerces-c
http://xerces.apache.org/xerces-c/download.cgi

xqilla 2.2.4
http://xqilla.sourceforge.net/HomePage
http://sourceforge.net/project/showfiles.php?group_id=152021

XQilla 2.2.4 fixes a bug concerning orphaned grammars when not using PVSI.
As Obyx depends upon a common grammar pool, and likewise does not use PVSI, this is the critical minimum version 
if one is validating.

??libfcgi: Used for fast cgi support.
??deb: libfcgi-dev 
??$sudo aptitude install libfcgi-dev

** Run-time:
(see below for mac os x)

libpcre: Used to handle regular expressions within Obyx.

    deb: libpcre3-dev 
    $sudo aptitude install libpcre3-dev

libcurl: This library provides network access utilities

    deb: libcurl3-dev 
    $sudo aptitude install libcurl3-dev

libmysql: This library provides database connectivity with MySQL
    deb: libmysqlclient15-dev 
    $sudo aptitude install libmysqlclient15-dev


-- MAC OS X Compile/Runtime Libraries --
These settings are for development/debugging..
It is best to put all the source code into a folder called Source
which can be accessed from xcode debugging..

GMP: (This offers arbitrary precision mathematics)
https://gmplib.org/download/gmp/gmp-5.1.3.tar.bz2
./configure -q CFLAGS="-O0 -g" CXXFLAGS="-O0 -g"
sudo make install

OR you can disable GMP at compile time with CC_DEFINES="${CC_DEFINES} -DDISALLOW_GMP"

ICU: (This offers lots of character conversions and transliteration)
http://download.icu-project.org/files/icu4c/52.1/icu4c-52_1-src.tgz
./configure --enable-debug --disable-release --disable-renaming -q
export CXXFLAGS="--std=c++0x"
sudo make install

OR you can disable ICU at compile time with CC_DEFINES="${CC_DEFINES} -DDISALLOW_ICU"

xercesc: (This a DOM compliant, XSD aware XML parser)
http://xerces.apache.org/xerces-c/
./configure -q CFLAGS="-O0 -g -m64" CXXFLAGS="-O0 -g -m64"
sudo make install 

xqilla: (This is a XPath 2/3 overlay for xercesc)
http://xqilla.sourceforge.net/
./configure -q
sudo make install 

pcre: (This is a regex engine)
http://ftp.cs.stanford.edu/pub/exim/pcre/
./configure --enable-utf --enable-pcre16 --enable-pcre32 --enable-jit --enable-utf --enable-unicode-properties -q CFLAGS="-O0 -g" CXXFLAGS="-O0 -g"

MAVERICKS
#The current version of the xercesc transcoder has an implicit cast. fix it:
/usr/local/include/xercesc/util/XMLUTF8Transcoder.hpp
Line 110:        
	char byte[2] = {(char)toCheck,0};


**** 3. Setup Server File Structure
The structure and location of files on the host server is flexible and controlled by configuration files. 
However, the following is suggested and used in this installation:

	/WWW_ROOT/public    - location of publicly accessible .html, .css, .obyx files.
    /WWW_ROOT/logs      - location of log files
    /WWW_ROOT/scripts   - location of Obyx run script files
    /WWW_ROOT/cgi       - location of Obyx binary and any other cgi scripts
    /WWW_ROOT/source    - location of Obyx source code

   $mkdir -p /WWW_ROOT/public
   $mkdir -p /WWW_ROOT/logs
   $mkdir -p /WWW_ROOT/scripts
   $mkdir -p /WWW_ROOT/cgi
   $mkdir -p /WWW_ROOT/source

**** 4. Download source code (SVN)
The Obyx source code is currently available in a SVN repository.
To checkout the source code do the following from the ~/RSapps directory:

	$cd /WWW_ROOT/source
	$svn co http://svn.obyx.org/obyx/supported/version1 obyx

To update the source files any later time 

	$cd /WWW_ROOT/source/obyx
	$svn update

**** 5. Set up compile settings
Before trying to compile the code some settings need to be setup. 
The file local.cfg contains compile settings specific to your setup. 
Amend the file as necessary. 

MYSQL_INC	Should point to the mysql include directory.
CC_INCLUDES Any additional include directories needed for the compilation. (each needs to be prefixed by -I)
CC_PATH		The path to gcc/g++
CC_DB		These are defines used to include or exclude compilation of the mysql or postgresql code.
			If you do not have postgresql or mysql, remove the -DALLOW flag for the salient item to prevent headers 
			from not being found.
CC_FLAGS	The normal set of additional gcc flags used for this compilation.
RPATH		The full path to the root directory of the www files as mentioned above.
			Importantly, this only MUST be the parent of the cgi directory to install to.
CGIDIR		The relative path to the cgi directory. It must be underneath RPATH.

/WWW_ROOT/source/local.cfg:
MYSQL_INC   = /usr/include/mysql
CC_INCLUDES = -I$(MYSQL_INC)
CC_PATH     = /usr/bin/
CC_DB       = -DALLOW_MYSQL -DALLOW_POSTGRESQL 	
CC_FLAGS    = -x c++ -funsigned-char -fno-asm -Wno-trigraphs -g -O3 -fmessage-length=0 $(CC_DB) $(CC_WARNA) $(CC_WARNB)
RPATH       = /WWW_ROOT
CGIDIR      = cgi

**** 6. Compile obyx.cgi binary

	$cd /WWW_ROOT/source/obyx
	$make /WWW_ROOT/cgi/obyx.cgi

To check that the linking is correct one can do:

	$ldd /WWW_ROOT/cgi/obyx.cgi


**** 7. Configure HTTP server
Http (Apache2) Configuration.
Apache needs to know how to handle .obyx files. 
The following basic apache server configuration file can be used as a basis.

FASTCGI
Although the binary should work with either module, the following details are 
for the module as described at

http://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html 

<VirtualHost YOUR-IP-ADDRESS:80>
	DocumentRoot  /WWW_ROOT/public
	ServerName    host.yourdomain.com
	RewriteEngine  on
	RewriteRule    ^/$   /index.html [R]

#####  Obyx configuration ########
	<IfModule mime_module>
		<LocationMatch \.cgi$>
			SetHandler cgi-script
		</LocationMatch>

#**********************************************
#comment these to allow fcgi to take obyx files.
#	<LocationMatch \.obyx$>
#		ForceType application/obyx+xml
#	</LocationMatch>
#	Action      application/obyx+xml	/o/obyx.cgi
#**********************************************

	</IfModule>
	ScriptAlias  /o/			  /WWW_ROOT/cgi
	<LocationMatch "^/o/" >
		Order Deny,Allow
		Deny from All
		Allow from env=REDIRECT_STATUS
	</LocationMatch>

#**********************************************
#ADD these to allow fcgi to take obyx files.
<LocationMatch \.(fcgi|obyx)$>
	SetHandler fcgid-script
</LocationMatch>

FcgidWrapper /WWW_ROOT/cgi/obyx.fcgi .obyx

#The following are global. though OBYX_CONFIG_FILE can be done at virtualhost level.
FcgidInitialEnv OBYX_CONFIG_FILE /WWW_ROOT/include/obyx.cf
FcgidInitialEnv OBYX_SQLSERVICE mysql
#This following line should be false when serving just one website.
FcgidInitialEnv OBYX_SQLPER_REQUEST true
FcgidInitialEnv OBYX_DEVELOPMENT true
FcgidInitialEnv OBYX_VALIDATE_ALWAYS true
FcgidInitialEnv OBYX_AUTO_UTF8_CHECK true

#The following are only necessary if used libraries are in custom directories.
FcgidInitialEnv OBYX_LIBCURLDIR /usr/local/lib
FcgidInitialEnv OBYX_LIBPCREDIR /usr/local/lib
FcgidInitialEnv OBYX_LIBMYSQLDIR /usr/local/mysql/lib
FcgidInitialEnv OBYX_LIBPQDIR /usr/local/pgsql/lib
#FcgidInitialEnv OBYX_LIBZIPDIR /usr/lib
FcgidInitialEnv OBYX_LIBGMPDIR /usr/local/lib
#**********************************************

###############################################################
#### IF you want to have both normal cgi and fastcgi instances of obyx, 
#### you will need a different  obyx suffix for one or the other.
#### The following is an example:
#Normal obyx cgi
<LocationMatch \.(cgi)$>
	SetHandler cgi-script
</LocationMatch>

ScriptAlias  /o/	/Library/WebServer/CGI-Executables/

<LocationMatch \.obyx$>
	ForceType application/obyx+xml
</LocationMatch>
Action       application/obyx+xml   /o/obyx.cgi

#Fast obyx fcgi
	<LocationMatch \.(fcgi|obyxf)$>
		SetHandler fcgid-script
	</LocationMatch>
FcgidInitialEnv OBYX_CONFIG_FILE /Library/WebServer/include/obyx.fcf
FcgidInitialEnv OBYX_SQLSERVICE mysql
FcgidInitialEnv OBYX_DEVELOPMENT true
FcgidInitialEnv OBYX_VALIDATE_ALWAYS true
FcgidInitialEnv OBYX_AUTO_UTF8_CHECK true
#The following are only necessary if used libraries are in custom directories.
FcgidInitialEnv OBYX_LIBCURLDIR /usr/local/lib
FcgidInitialEnv OBYX_LIBPCREDIR /usr/local/lib
FcgidInitialEnv OBYX_LIBMYSQLDIR /usr/local/mysql/lib
FcgidInitialEnv OBYX_LIBPQDIR /usr/local/pgsql/lib
#FcgidInitialEnv OBYX_LIBZIPDIR /usr/lib
FcgidInitialEnv OBYX_LIBGMPDIR /usr/local/lib
FcgidWrapper /Library/WebServer/CGI-Executables/obyx.fcgi .fbyx
###############################################################

#obyx runtime will be able to access any files/directories under the OBYX_ROOT_DIR directory
#eg using filename /foo.html will actually be pointing to /OBYX_ROOT_DIR/foo.html
#the scripts directory, which is used by the 'shell' operation should be outside OBYX_ROOT_DIR.

 SetEnv OBYX_CONFIG_FILE /include/obyx.cf


##### End Obyx Configuration #####
</VirtualHost>

so the obyx.cf (or fcf) file is a simple name value list as follows:
#This should only be false if one is only using xhtml1 strict files.
OBYX_USING_XHTML5 		true

#This turns on/off the xml declaration
OBYX_XMLDECL 			true

#If this true, errors will generate a syslog error
OBYX_SYSLOG_OFF        true

#If this is true, utf-8 strings will be checked on kind='auto'. set to false for a small speedup.
OBYX_AUTO_UTF8_CHECK	true

#setting this to true is a good idea. it ensures valid xml during parse at very small cost.
OBYX_VALIDATE_ALWAYS 	false

#Set a default version if one does not want to set document version attributes. 
#Leaving this unset will obyx files (which dont have a version attribute) to be compliant with the latest version of the obyx language
#OBYX_DEFAULT_VERSION 	1.140101

#path to sendmail or equivalent.
OBYX_MTA				/usr/sbin/sendmail

#SALT should be a random hexstring. It will be used by obyx for salting and is not exposed.
OBYX_SALT				92b558b5fd711a2df038b1cf0f3feab946e928f2a111b56f86be3ada9d0ac035

#OBYX_DEVELOPMENT false will suppress front-end error reporting.
OBYX_DEVELOPMENT       true
OBYX_ROOT_DIR          /WWW_ROOT/public
OBYX_SCRIPTS_DIR       /WWW_ROOT/scripts
OBYX_SCRATCH_DIR       /tmp

#sql connection settings
OBYX_SQLSERVICE        mysql  (or postgresql)
OBYX_SQLDATABASE       YOUR-DATABASE-NAME
OBYX_SQLHOST           YOUR-DATABASE-HOST
OBYX_SQLPORT           YOUR-DATABASE-PORT
OBYX_SQLUSER           YOUR-DATABASE-USERNAME
OBYX_SQLUSERPW         YOUR-DATABASE-USERPASSWORD

#IF using fcgi serving one database, then one does not need to reconnect for each request.
OBYX_SQLPER_REQUEST 	false

#set the following, if debugging or using breakpoints in obyx files.
#OBYX_DEVELOPMENT       true
	
#There are some settings for using custom paths to dynamic libraries.
#If the libraries are in normal places they don't need to be set.
#OBYX_LIBCURLDIR     /usr/local/lib
#OBYX_LIBPCREDIR     /usr/local/lib
#OBYX_LIBGMPDIR		 /usr/local/lib
#OBYX_LIBZIPDIR         /usr/lib

#MySQL Library location	(if using MySQL)
OBYX_LIBMYSQLCRDIR      /usr/local/mysql/lib

#PostgreSQL Library Location (if using PostgreSQL)
#OBYX_LIBPQDIR           /usr/local/pgsql/lib

#LibICU may have a version string - so look out for what that is.
#On debian, this can be done with 
# nm -CD ./lib/libicui18n.so | grep ztrans_close
#On Mac OS X, try
# nm -g /usr/local/lib/libicui18n.dylib | grep ztrans_close
#if the result is something like "_ztrans_close" then comment out OBYX_LIBICUVS
#if the result is something like "_ztrans_close_52" then OBYX_LIBICUVS needs setting to _52
#OBYX_LIBICUVS			_52


**** 8. Test

Example Obyx Hello World

The two following files may be used to test that Obyx is working. 
It uses both an SQL connection and a filesystem include to test some basic functionality. 
The files should go into your public directory (e.g. /WWW_ROOT/public ):

Run the hello world example by going to http://www.yourdomain.com/hello_world.obyx
You should simply see the words "Hello World" in a valid html page.

hello_world.obyx

<instruction xmlns="http://www.obyx.org" >
   <input>
       <instruction note="load view">
           <output space="store" value="v" />
           <input space="file" value="hello_world.html" />
       </instruction>
       <iteration operation="sql" note="get model">
           <output space="store" value="v#//*[@id='msg']/text()" />
           <control value="select 'Hello World' as message" />
           <body space="field" value="message" />
       </iteration>
       <instruction note="display view">
           <input space="store" value="v" release="true" />
       </instruction>      
   </input>
</instruction>

hello_world.html

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<title>Hello World View</title>
</head>
<body><div id="msg">Message</div></body>
</html>


